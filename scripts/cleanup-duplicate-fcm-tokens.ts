import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è FCM —Ç–æ–∫–µ–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–∞–º—ã–º –ø–æ–∑–¥–Ω–∏–º lastAccess
 */
async function cleanupDuplicateFcmTokens() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è FCM —Ç–æ–∫–µ–Ω–æ–≤...');

  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å FCM —Ç–æ–∫–µ–Ω–∞–º–∏
    const usersWithTokens = await prisma.users.findMany({
      where: {
        fcmToken: {
          not: null,
        },
      },
      select: {
        id: true,
        fcmToken: true,
        lastAccess: true,
        firstName: true,
        lastName: true,
      },
      orderBy: {
        lastAccess: 'desc',
      },
    });

    console.log(`üì± –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å FCM —Ç–æ–∫–µ–Ω–∞–º–∏: ${usersWithTokens.length}`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ FCM —Ç–æ–∫–µ–Ω—É
    const tokenGroups = new Map<string, typeof usersWithTokens>();
    
    usersWithTokens.forEach((user) => {
      if (!user.fcmToken) return;
      
      if (!tokenGroups.has(user.fcmToken)) {
        tokenGroups.set(user.fcmToken, []);
      }
      tokenGroups.get(user.fcmToken)!.push(user);
    });

    console.log(`üîë –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö FCM —Ç–æ–∫–µ–Ω–æ–≤: ${tokenGroups.size}`);

    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã
    const duplicateTokens = Array.from(tokenGroups.entries()).filter(
      ([_, users]) => users.length > 1,
    );

    console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–æ–≤: ${duplicateTokens.length}`);

    if (duplicateTokens.length === 0) {
      console.log('‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è FCM —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
      return;
    }

    let totalCleaned = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è —Ç–æ–∫–µ–Ω
    for (const [token, users] of duplicateTokens) {
      console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω: ${token.substring(0, 20)}...`);
      console.log(`üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º: ${users.length}`);

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ lastAccess (—Å–∞–º—ã–π –ø–æ–∑–¥–Ω–∏–π –ø–µ—Ä–≤—ã–π)
      const sortedUsers = users.sort((a, b) => {
        const aTime = a.lastAccess?.getTime() || 0;
        const bTime = b.lastAccess?.getTime() || 0;
        return bTime - aTime;
      });

      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–∞–º—ã–º –ø–æ–∑–¥–Ω–∏–º lastAccess
      const keepUser = sortedUsers[0];
      const removeUsers = sortedUsers.slice(1);

      console.log(`‚úÖ –¢–æ–∫–µ–Ω –æ—Å—Ç–∞–µ—Ç—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${keepUser.firstName} ${keepUser.lastName} (ID: ${keepUser.id})`);
      console.log(`üóëÔ∏è  –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω —É ${removeUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);

      // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω —É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      for (const user of removeUsers) {
        await prisma.users.update({
          where: { id: user.id },
          data: {
            fcmToken: null,
            pushNotificationsEnabled: false,
          },
        });

        console.log(`   - ${user.firstName} ${user.lastName} (ID: ${user.id})`);
        totalCleaned++;
      }
    }

    console.log(`\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—á–∏—â–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ —É ${totalCleaned} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è FCM —Ç–æ–∫–µ–Ω–æ–≤:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç, –µ—Å–ª–∏ –æ–Ω –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  cleanupDuplicateFcmTokens()
    .then(() => {
      console.log('‚ú® –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { cleanupDuplicateFcmTokens };
