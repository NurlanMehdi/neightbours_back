import { Injectable, Logger, Inject, forwardRef } from '@nestjs/common';
import { FirebaseService } from './firebase.service';
import { NotificationType } from '../modules/notifications/interfaces/notification.interface';
import { UserRepository } from '../modules/users/repositories/user.repository';

export interface IPushNotificationData {
  title: string;
  body: string;
  userId: number;
  type: NotificationType;
  payload?: any;
}

export interface ISendPushNotificationToUser {
  userId: number;
  fcmToken: string;
  pushNotificationsEnabled: boolean;
}

@Injectable()
export class FirebasePushService {
  private readonly logger = new Logger(FirebasePushService.name);
  private sentNotifications = new Set<string>();

  constructor(
    private readonly firebaseService: FirebaseService,
    @Inject(forwardRef(() => UserRepository))
    private readonly userRepository: UserRepository,
  ) {}

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendPushNotificationToUser(
    user: ISendPushNotificationToUser,
    data: IPushNotificationData,
  ): Promise<boolean> {
    const callId = Math.random().toString(36).substr(2, 9);
    const deduplicationKey = `${user.userId}-${data.type}-${data.title}-${Date.now().toString().slice(0, -3)}`;
    
    this.logger.log(`üî• FIREBASE CALL START [${callId}] - User: ${user.userId}, Type: ${data.type}, Title: "${data.title}"`);
    
    if (this.sentNotifications.has(deduplicationKey)) {
      this.logger.warn(`üö´ DUPLICATE NOTIFICATION BLOCKED [${callId}] - Key: ${deduplicationKey}`);
      return false;
    }
    
    this.sentNotifications.add(deduplicationKey);
    setTimeout(() => this.sentNotifications.delete(deduplicationKey), 5 * 60 * 1000);
    
    try {
      if (!user.pushNotificationsEnabled) {
        this.logger.log(
          `Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.userId}`,
        );
        return false;
      }

      if (!user.fcmToken) {
        this.logger.log(`FCM —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.userId}`);
        return false;
      }

      const message = {
        notification: {
          title: data.title,
          body: data.body,
        },
        data: {
          type: data.type,
          userId: data.userId.toString(),
          payload: data.payload ? JSON.stringify(data.payload) : '',
        },
        token: user.fcmToken,
      };

      const result = await this.firebaseService.getMessaging().send(message);

      this.logger.log(
        `‚úÖ FIREBASE CALL SUCCESS [${callId}] - User: ${user.userId}, Message ID: ${result}`,
      );
      return true;
    } catch (error) {
      this.logger.error(
        `‚ùå FIREBASE CALL ERROR [${callId}] - User: ${user.userId}: ${error.message}`,
      );
      this.sentNotifications.delete(deduplicationKey);

      if (
        error.code === 'messaging/invalid-registration-token' ||
        error.code === 'messaging/registration-token-not-registered'
      ) {
        this.logger.warn(
          `–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π FCM —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.userId}. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω.`,
        );
        await this.cleanInvalidFcmToken(user.userId);
      }

      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  async sendPushNotificationToMultipleUsers(
    users: ISendPushNotificationToUser[],
    data: IPushNotificationData,
  ): Promise<{ successCount: number; failureCount: number }> {
    const batchId = Math.random().toString(36).substr(2, 9);
    this.logger.log(`üì¶ FIREBASE BATCH START [${batchId}] - ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, Type: ${data.type}`);

    const enabledUsers = users.filter(
      (user) => user.pushNotificationsEnabled && user.fcmToken,
    );

    if (enabledUsers.length === 0) {
      this.logger.log(
        `üì¶ FIREBASE BATCH SKIP [${batchId}] - –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏`,
      );
      return { successCount: 0, failureCount: 0 };
    }

    this.logger.log(`üì¶ FIREBASE BATCH PROCESS [${batchId}] - ${enabledUsers.length} enabled users`);
    const promises = enabledUsers.map((user) =>
      this.sendPushNotificationToUser(user, data),
    );
    const results = await Promise.all(promises);

    const successCount = results.filter((result) => result === true).length;
    const failureCount = results.filter((result) => result === false).length;

    this.logger.log(
      `üì¶ FIREBASE BATCH END [${batchId}] - —É—Å–ø–µ—à–Ω–æ: ${successCount}, —Å –æ—à–∏–±–∫–∞–º–∏: ${failureCount}`,
    );

    return { successCount, failureCount };
  }


  /**
   * –û—á–∏—â–∞–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π FCM —Ç–æ–∫–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async cleanInvalidFcmToken(userId: number): Promise<void> {
    try {
      await this.userRepository.update(userId, {
        fcmToken: null,
      });
      this.logger.log(
        `–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π FCM —Ç–æ–∫–µ–Ω –æ—á–∏—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`,
      );
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ FCM —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${error.message}`,
      );
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞
   */
  generateNotificationTitle(type: NotificationType): string {
    const titleMapping: Record<NotificationType, string> = {
      [NotificationType.INFO]: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
      [NotificationType.EVENT_CREATED]: '–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ',
      [NotificationType.EVENT_UPDATED]: '–°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
      [NotificationType.EVENT_CANCELLED]: '–°–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
      [NotificationType.EVENT_DELETED]: '–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ',
      [NotificationType.USER_JOINED_EVENT]: '–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫',
      [NotificationType.USER_LEFT_EVENT]: '–£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —Å–æ–±—ã—Ç–∏–µ',
      [NotificationType.USER_MENTIONED]: '–í–∞—Å —É–ø–æ–º—è–Ω—É–ª–∏',
      [NotificationType.MESSAGE_RECEIVED]: '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      [NotificationType.COMMUNITY_INVITE]: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ',
      [NotificationType.COMMUNITY_APPROVED]: '–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞',
      [NotificationType.COMMUNITY_REJECTED]: '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
      [NotificationType.USER_JOINED_COMMUNITY]: '–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞',
      [NotificationType.PROPERTY_VERIFIED]: '–û–±—ä–µ–∫—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      [NotificationType.SYSTEM_MAINTENANCE]: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
      [NotificationType.SYSTEM_UPDATE]: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã',
    };

    return titleMapping[type] || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
  }
}
