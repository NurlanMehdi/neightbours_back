import { Injectable } from '@nestjs/common';
import { NotificationType } from '../interfaces/notification.interface';
import { PrismaService } from '../../../prisma/prisma.service';
import { BaseNotificationTrigger } from './base-notification.trigger';
import { NotificationService } from '../services/notification.service';
import {
  ISystemEventData,
  SystemEventType,
  ICreateNotification,
} from '../interfaces/notification.interface';

/**
 * –¢—Ä–∏–≥–≥–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤
 */
@Injectable()
export class CommunityNotificationTrigger extends BaseNotificationTrigger {
  constructor(
    protected readonly notificationService: NotificationService,
    private readonly prisma: PrismaService,
  ) {
    super(notificationService);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º–∏
   */
  async handle(eventData: ISystemEventData): Promise<void> {
    const triggerId = Math.random().toString(36).substr(2, 9);
    this.logger.log(`üè¨ COMMUNITY TRIGGER START [${triggerId}] - –°–æ–±—ã—Ç–∏–µ: ${eventData.eventType}, –°–æ–æ–±—â–µ—Å—Ç–≤–æ: ${eventData.relatedEntityId}`);

    const targetUserIds = await this.getTargetUserIds(eventData);

    if (targetUserIds.length === 0) {
      this.logger.log(`üè¨ COMMUNITY TRIGGER SKIP [${triggerId}] - –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      return;
    }

    const notificationType = this.getNotificationType(eventData.eventType);
    const title = this.generateTitle(eventData);
    const message = this.generateMessage(eventData);

    const notifications: ICreateNotification[] = targetUserIds.map(
      (userId) => ({
        ...this.createBaseNotificationData(eventData, userId),
        type: notificationType,
        title,
        message,
      }),
    );

    this.logger.log(`üè¨ COMMUNITY TRIGGER PROCESS [${triggerId}] - –°–æ–∑–¥–∞–µ–º ${notifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${targetUserIds.join(', ')}`);
    await this.createMultipleNotifications(notifications);
    this.logger.log(`üè¨ COMMUNITY TRIGGER END [${triggerId}] - –£—Å–ø–µ—à–Ω–æ`);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
   */
  protected shouldHandle(eventType: SystemEventType): boolean {
    return [SystemEventType.USER_JOINED_COMMUNITY].includes(eventType);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  protected generateTitle(eventData: ISystemEventData): string {
    switch (eventData.eventType) {
      case SystemEventType.USER_JOINED_COMMUNITY:
        return '–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫';
      default:
        return '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞';
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  protected generateMessage(eventData: ISystemEventData): string {
    const newUserName = eventData.additionalData?.newUserName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    const communityName =
      eventData.additionalData?.communityName || '—Å–æ–æ–±—â–µ—Å—Ç–≤–æ';

    switch (eventData.eventType) {
      case SystemEventType.USER_JOINED_COMMUNITY:
        return `${newUserName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É "${communityName}"`;
      default:
        return `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ "${communityName}"`;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  protected getNotificationType(eventType: SystemEventType): NotificationType {
    switch (eventType) {
      case SystemEventType.USER_JOINED_COMMUNITY:
        return NotificationType.USER_JOINED_COMMUNITY;
      default:
        return NotificationType.USER_JOINED_COMMUNITY;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  protected async getTargetUserIds(
    eventData: ISystemEventData,
  ): Promise<number[]> {
    if (!eventData.relatedEntityId) {
      this.logger.warn('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞');
      return [];
    }

    const communityId = eventData.relatedEntityId;
    const triggererUserId = eventData.additionalData?.triggererUserId;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ
      const community = await this.prisma.community.findUnique({
        where: { id: communityId },
        include: {
          users: {
            select: { userId: true },
          },
          creator: {
            select: { id: true },
          },
        },
      });

      if (!community) {
        this.logger.warn(`–°–æ–æ–±—â–µ—Å—Ç–≤–æ —Å ID ${communityId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        return [];
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∫—Ä–æ–º–µ —Ç–æ–≥–æ –∫—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
      let targetUserIds = [
        ...community.users.map((u) => u.userId),
        community.creator.id,
      ];

      // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
      if (triggererUserId) {
        targetUserIds = targetUserIds.filter(
          (userId) => userId !== triggererUserId,
        );
      }

      // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const uniqueUserIds = Array.from(new Set(targetUserIds));
      return this.filterUsers(uniqueUserIds);
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`,
        error.stack,
      );
      return [];
    }
  }
}
