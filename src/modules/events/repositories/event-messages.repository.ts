import { Injectable } from '@nestjs/common';
import { PrismaService } from '../../../prisma/prisma.service';
import { CreateMessageDto } from '../dto/create-message.dto';
import { AddMessageDto } from '../dto/add-message.dto';
import { EventMessage } from '@prisma/client';

@Injectable()
export class EventMessagesRepository {
  constructor(private readonly prisma: PrismaService) {}

  /**
   * Creates a message with duplicate prevention
   * 
   * DUPLICATE PREVENTION: Checks for identical messages from same user to same event
   * within the last 5 seconds to prevent frontend retry/double-call issues.
   */
  async createMessage(
    userId: number,
    eventId: number,
    dto: CreateMessageDto,
  ): Promise<EventMessage> {
    // Check for recent duplicate messages (last 5 seconds)
    const fiveSecondsAgo = new Date(Date.now() - 5000);
    
    const recentDuplicate = await this.prisma.eventMessage.findFirst({
      where: {
        userId,
        eventId,
        text: dto.text,
        createdAt: {
          gte: fiveSecondsAgo,
        },
      },
      include: {
        user: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            avatar: true,
          },
        },
      },
    });

    if (recentDuplicate) {
      console.log(`üõ°Ô∏è DATABASE DUPLICATE PREVENTION: Found identical message from user ${userId} to event ${eventId} within 5 seconds`);
      console.log(`   Existing messageId: ${recentDuplicate.id}, text: "${recentDuplicate.text}"`);
      console.log(`   Returning existing message instead of creating duplicate`);
      return recentDuplicate;
    }

    // Create new message if no recent duplicate found
    return this.prisma.eventMessage.create({
      data: {
        text: dto.text,
        userId,
        eventId,
      },
      include: {
        user: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            avatar: true,
          },
        },
      },
    });
  }

  /**
   * DEPRECATED - NO LONGER USED
   * 
   * This method was removed as part of the notification duplication fix.
   * All message creation now goes through createMessage() for unified notification logic.
   * 
   * If this method is called, it means the refactoring is incomplete.
   */
  async addMessage(dto: AddMessageDto): Promise<EventMessage> {
    throw new Error('addMessage() is deprecated. Use createMessage() instead to prevent duplicate notifications.');
  }

  async getEventMessages(
    eventId: number,
    page: number = 1,
    limit: number = 50,
  ): Promise<EventMessage[]> {
    return this.prisma.eventMessage.findMany({
      where: {
        eventId,
      },
      include: {
        user: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            avatar: true,
          },
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
      skip: (page - 1) * limit,
      take: limit,
    });
  }

  async isUserParticipant(userId: number, eventId: number): Promise<boolean> {
    const participant = await this.prisma.usersOnEvents.findFirst({
      where: {
        userId,
        eventId,
      },
    });
    return !!participant;
  }

  /**
   * –û—Ç–º–µ—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (upsert)
   */
  async markEventAsRead(userId: number, eventId: number): Promise<void> {
    await this.prisma.eventRead.upsert({
      where: {
        userId_eventId: {
          userId,
          eventId,
        },
      },
      update: {
        readAt: new Date(),
      },
      create: {
        userId,
        eventId,
        readAt: new Date(),
      },
    });
  }

  /**
   * –û—Ç–º–µ—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DTO
   */
  async markEventAsReadWithDto(userId: number, eventId: number): Promise<void> {
    await this.prisma.eventRead.upsert({
      where: {
        userId_eventId: {
          userId,
          eventId,
        },
      },
      update: {
        readAt: new Date(),
      },
      create: {
        userId,
        eventId,
        readAt: new Date(),
      },
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUnreadMessages(
    userId: number,
    eventId?: number,
  ): Promise<EventMessage[]> {
    // –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const readEventIds = await this.prisma.eventRead.findMany({
      where: {
        userId,
      },
      select: {
        eventId: true,
      },
    });

    const readEventIdList = readEventIds.map((read) => read.eventId);

    // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±—ã—Ç–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç
    const userParticipations = await this.prisma.usersOnEvents.findMany({
      where: {
        userId,
      },
      select: {
        eventId: true,
      },
    });

    const userEventIds = userParticipations.map((up) => up.eventId);

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    if (userEventIds.length === 0) {
      return [];
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ–±—ã—Ç–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –∏ –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –ù–ï —á–∏—Ç–∞–ª
    const whereClause: any = {
      // –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userId: {
        not: userId,
      },
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —Å–æ–±—ã—Ç–∏—è–º, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç
      event: {
        id: {
          in: userEventIds,
        },
        // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        isActive: true,
      },
    };

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π eventId
    if (eventId) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –ª–∏ —ç—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
      if (readEventIdList.includes(eventId)) {
        // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        return [];
      } else {
        // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —ç—Ç–æ–º—É eventId
        whereClause.eventId = eventId;
      }
    } else {
      // –ï—Å–ª–∏ eventId –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
      whereClause.eventId = {
        notIn: readEventIdList,
      };
    }

    return this.prisma.eventMessage.findMany({
      where: whereClause,
      include: {
        user: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            avatar: true,
          },
        },
        event: {
          select: {
            id: true,
            title: true,
            communityId: true,
          },
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å–æ–±—ã—Ç–∏—è–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUnreadMessagesGroupedByEvent(userId: number): Promise<{
    count: Record<string, number>;
    EVENT: number;
    NOTIFICATION: number;
  }> {
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å timestamp –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Ö –ø—Ä–æ—á–∏—Ç–∞–ª
    const readEvents = await this.prisma.eventRead.findMany({
      where: { userId },
      select: { eventId: true, readAt: true },
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç, —Å timestamp –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const userParticipations = await this.prisma.usersOnEvents.findMany({
      where: { userId },
      select: { eventId: true, joinedAt: true },
    });
    const userEventIds = userParticipations.map((up) => up.eventId);

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (userEventIds.length === 0) {
      return {
        count: {},
        EVENT: 0,
        NOTIFICATION: 0,
      };
    }

    // –°–æ–∑–¥–∞–µ–º maps –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ timestamps –ø–æ eventId
    const readAtMap = new Map(
      readEvents.map((read) => [read.eventId, read.readAt]),
    );
    const joinedAtMap = new Map(
      userParticipations.map((participation) => [
        participation.eventId,
        participation.joinedAt,
      ]),
    );

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ–±—ã—Ç–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç
    const messages = await this.prisma.eventMessage.findMany({
      where: {
        // –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userId: { not: userId },
        // –¢–æ–ª—å–∫–æ –∏–∑ —Å–æ–±—ã—Ç–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç
        eventId: { in: userEventIds },
        // –¢–æ–ª—å–∫–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        event: { isActive: true },
      },
      include: {
        event: {
          select: { id: true, type: true },
        },
      },
      orderBy: { createdAt: 'desc' },
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ —Å–æ–∑–¥–∞–Ω—ã –ü–û–°–õ–ï join time –ò readAt timestamp
    const unreadMessages = messages.filter((message) => {
      const joinedAt = joinedAtMap.get(message.eventId);
      const readAt = readAtMap.get(message.eventId);

      // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ –ü–û–°–õ–ï –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–æ–±—ã—Ç–∏—é
      if (!joinedAt || message.createdAt <= joinedAt) {
        return false;
      }

      // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ - —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ join –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
      if (!readAt) {
        return true;
      }

      // –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –ü–û–°–õ–ï –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—á—Ç–µ–Ω–∏—è
      return message.createdAt > readAt;
    });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å—á–∏—Ç–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è
    const count: Record<string, number> = {};
    let totalEventMessages = 0;
    let totalNotificationMessages = 0;

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ eventId
    const groupedByEvent = unreadMessages.reduce(
      (acc, message) => {
        const eventId = message.eventId;
        if (!acc[eventId]) {
          acc[eventId] = {
            count: 0,
            type: message.event.type,
          };
        }
        acc[eventId].count++;
        return acc;
      },
      {} as Record<number, { count: number; type: string }>,
    );

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ —Å—á–∏—Ç–∞–µ–º –ø–æ —Ç–∏–ø–∞–º
    Object.entries(groupedByEvent).forEach(([eventIdStr, data]) => {
      count[eventIdStr] = data.count;

      if (data.type === 'EVENT') {
        totalEventMessages += data.count;
      } else if (data.type === 'NOTIFICATION') {
        totalNotificationMessages += data.count;
      }
    });

    return {
      count,
      EVENT: totalEventMessages,
      NOTIFICATION: totalNotificationMessages,
    };
  }
}
