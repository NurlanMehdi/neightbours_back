import { Test, TestingModule } from '@nestjs/testing';
import { EventsService } from '../events.service';
import { UnifiedMessageNotificationService } from '../services/unified-message-notification.service';
import { CreateMessageDto } from '../dto/create-message.dto';
import { AddMessageDto } from '../dto/add-message.dto';
import { Logger } from '@nestjs/common';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 */
export class UnifiedNotificationTester {
  private readonly logger = new Logger(UnifiedNotificationTester.name);

  constructor(
    private readonly eventsService: EventsService,
    private readonly unifiedService: UnifiedMessageNotificationService,
  ) {}

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
   */
  async runFullTest(): Promise<{
    testResults: any[];
    cacheStats: any;
    success: boolean;
    summary: string;
  }> {
    this.logger.log('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');

    const testResults: any[] = [];
    
    try {
      // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
      this.unifiedService.clearCache();
      this.logger.log('‚úÖ –ö–µ—à –æ—á–∏—â–µ–Ω');

      // –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
      const test1 = await this.testWebSocketMessage();
      testResults.push(test1);

      // –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ HTTP (–¥–æ–ª–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è)
      const test2 = await this.testHttpMessageDuplicate();
      testResults.push(test2);

      // –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ HTTP
      const test3 = await this.testHttpMessageNew();
      testResults.push(test3);

      // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞
      const cacheStats = this.unifiedService.getCacheStats();
      testResults.push({
        testName: 'Cache Statistics',
        result: 'INFO',
        data: cacheStats,
      });

      const successCount = testResults.filter(r => r.result === 'SUCCESS').length;
      const totalTests = testResults.filter(r => r.result !== 'INFO').length;

      return {
        testResults,
        cacheStats,
        success: successCount === totalTests,
        summary: `–ü—Ä–æ–π–¥–µ–Ω–æ ${successCount}/${totalTests} —Ç–µ—Å—Ç–æ–≤. –ö–µ—à: ${cacheStats.activeEntries} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.`,
      };

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
      return {
        testResults,
        cacheStats: this.unifiedService.getCacheStats(),
        success: false,
        summary: `–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ —Å –æ—à–∏–±–∫–æ–π: ${error.message}`,
      };
    }
  }

  /**
   * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
   */
  private async testWebSocketMessage(): Promise<any> {
    this.logger.log('üì± –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket');
    
    try {
      const messageDto: CreateMessageDto = {
        text: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket',
      };

      // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket (createMessage)
      const message = await this.eventsService.createMessage(1, 1, messageDto);
      
      return {
        testName: 'WebSocket Message',
        result: 'SUCCESS',
        data: {
          messageId: message.id,
          source: 'websocket',
          text: message.text,
        },
      };
    } catch (error) {
      return {
        testName: 'WebSocket Message',
        result: 'FAILED',
        error: error.message,
      };
    }
  }

  /**
   * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç —á–µ—Ä–µ–∑ HTTP
   */
  private async testHttpMessageDuplicate(): Promise<any> {
    this.logger.log('üîÑ –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ —á–µ—Ä–µ–∑ HTTP (–¥–æ–ª–∂–Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è)');
    
    try {
      const messageDto: AddMessageDto = {
        text: '–î—É–±–ª–∏–∫–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è',
        userId: 1,
        eventId: 1,
      };

      // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–æ–≥–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ HTTP
      const message = await this.eventsService.addMessage(messageDto);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ª–æ–≥–∞—Ö –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      const cacheStats = this.unifiedService.getCacheStats();
      
      return {
        testName: 'HTTP Duplicate Block',
        result: cacheStats.activeEntries > 0 ? 'SUCCESS' : 'FAILED',
        data: {
          messageId: message.id,
          source: 'http',
          cacheEntriesAfter: cacheStats.activeEntries,
        },
      };
    } catch (error) {
      return {
        testName: 'HTTP Duplicate Block',
        result: 'FAILED',
        error: error.message,
      };
    }
  }

  /**
   * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ HTTP
   */
  private async testHttpMessageNew(): Promise<any> {
    this.logger.log('üì® –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ HTTP');
    
    try {
      const messageDto: AddMessageDto = {
        text: '–ù–æ–≤–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ HTTP',
        userId: 2, // –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        eventId: 1,
      };

      const message = await this.eventsService.addMessage(messageDto);
      
      return {
        testName: 'HTTP New Message',
        result: 'SUCCESS',
        data: {
          messageId: message.id,
          source: 'http',
          text: message.text,
        },
      };
    } catch (error) {
      return {
        testName: 'HTTP New Message',
        result: 'FAILED',
        error: error.message,
      };
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
   */
  generateReport(testResult: any): string {
    const { testResults, cacheStats, success, summary } = testResult;
    
    let report = '\n' + '='.repeat(60) + '\n';
    report += 'üß™ –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô\n';
    report += '='.repeat(60) + '\n\n';
    
    report += `üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${success ? '‚úÖ –£–°–ü–ï–®–ù–û' : '‚ùå –ù–ï–£–î–ê–ß–ù–û'}\n`;
    report += `üìù –†–µ–∑—é–º–µ: ${summary}\n\n`;
    
    report += 'üìã –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤:\n';
    report += '-'.repeat(40) + '\n';
    
    testResults.forEach((test, index) => {
      const icon = test.result === 'SUCCESS' ? '‚úÖ' : test.result === 'FAILED' ? '‚ùå' : '‚ÑπÔ∏è';
      report += `${index + 1}. ${icon} ${test.testName}: ${test.result}\n`;
      
      if (test.data) {
        Object.entries(test.data).forEach(([key, value]) => {
          report += `   ${key}: ${JSON.stringify(value)}\n`;
        });
      }
      
      if (test.error) {
        report += `   –û—à–∏–±–∫–∞: ${test.error}\n`;
      }
      
      report += '\n';
    });
    
    report += 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏:\n';
    report += '-'.repeat(40) + '\n';
    report += `–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${cacheStats.totalEntries}\n`;
    report += `–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${cacheStats.activeEntries}\n`;
    report += `–ò—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π: ${cacheStats.expiredEntries}\n`;
    
    if (cacheStats.oldestEntry) {
      report += `–°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å: ${cacheStats.oldestEntry}\n`;
    }
    
    if (cacheStats.newestEntry) {
      report += `–°–∞–º–∞—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å: ${cacheStats.newestEntry}\n`;
    }
    
    report += '\n' + '='.repeat(60) + '\n';
    
    return report;
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–µ—Ä–∞
 */
export async function runUnifiedNotificationTest(
  eventsService: EventsService,
  unifiedService: UnifiedMessageNotificationService,
): Promise<void> {
  const tester = new UnifiedNotificationTester(eventsService, unifiedService);
  const result = await tester.runFullTest();
  const report = tester.generateReport(result);
  
  console.log(report);
  
  // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  const fs = require('fs');
  const path = require('path');
  
  const reportPath = path.join(__dirname, '../../logs/notification-test-report.log');
  fs.writeFileSync(reportPath, report, 'utf8');
  
  console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`);
}
