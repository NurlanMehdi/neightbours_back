const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createUsersWithRelationships() {
  try {
    console.log('üèóÔ∏è  –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° –°–í–Ø–ó–Ø–ú–ò');
    console.log('=' .repeat(50));

    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
    const admin = await prisma.users.findFirst({
      where: { role: 'ADMIN' }
    });

    if (!admin) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∞–¥–º–∏–Ω–∞.');
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω: ${admin.firstName || 'Admin'} (ID: ${admin.id})`);

    // –°–æ–∑–¥–∞–µ–º 3 –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
    const usersData = [
      {
        phone: '79001234567',
        email: 'community.creator@test.com',
        firstName: '–°–æ–∑–¥–∞—Ç–µ–ª—å',
        lastName: '–°–æ–æ–±—â–µ—Å—Ç–≤',
        gender: 'MALE',
        role: 'USER',
        isVerified: true,
        status: 'ACTIVE',
        registrationStep: 5,
        latitude: 55.7558,
        longitude: 37.6176,
        address: '–¢–µ—Å—Ç–æ–≤–∞—è —É–ª., –¥. 1',
      },
      {
        phone: '79001234568',
        email: 'event.creator@test.com',
        firstName: '–°–æ–∑–¥–∞—Ç–µ–ª—å',
        lastName: '–°–æ–±—ã—Ç–∏–π',
        gender: 'FEMALE',
        role: 'USER',
        isVerified: true,
        status: 'ACTIVE',
        registrationStep: 5,
        latitude: 55.7600,
        longitude: 37.6200,
        address: '–¢–µ—Å—Ç–æ–≤–∞—è —É–ª., –¥. 2',
      },
      {
        phone: '79001234569',
        email: 'property.owner@test.com',
        firstName: '–í–ª–∞–¥–µ–ª–µ—Ü',
        lastName: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
        gender: 'MALE',
        role: 'USER',
        isVerified: true,
        status: 'ACTIVE',
        registrationStep: 5,
        latitude: 55.7500,
        longitude: 37.6100,
        address: '–¢–µ—Å—Ç–æ–≤–∞—è —É–ª., –¥. 3',
      }
    ];

    console.log('\n1Ô∏è‚É£  –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const createdUsers = [];
    for (const userData of usersData) {
      const user = await prisma.users.create({ data: userData });
      createdUsers.push(user);
      console.log(`   ‚úÖ ${user.firstName} ${user.lastName} (ID: ${user.id})`);
    }

    const [communityCreator, eventCreator, propertyOwner] = createdUsers;

    console.log('\n2Ô∏è‚É£  –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞...');
    const community = await prisma.community.create({
      data: {
        name: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ',
        description: '–°–æ–æ–±—â–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è',
        latitude: 55.7558,
        longitude: 37.6176,
        isPrivate: false,
        isActive: true,
        createdBy: communityCreator.id,
        joinCode: 'TEST123',
      }
    });
    console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ "${community.name}" (ID: ${community.id})`);

    console.log('\n3Ô∏è‚É£  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ...');
    for (const user of createdUsers) {
      await prisma.usersOnCommunities.create({
        data: {
          userId: user.id,
          communityId: community.id,
        }
      });
      console.log(`   ‚úÖ ${user.firstName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ`);
    }

    console.log('\n4Ô∏è‚É£  –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...');
    const events = [];
    for (let i = 0; i < 2; i++) {
      const event = await prisma.event.create({
        data: {
          title: `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ ${i + 1}`,
          description: `–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ${i + 1} –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`,
          latitude: 55.7558 + (i * 0.001),
          longitude: 37.6176 + (i * 0.001),
          type: 'EVENT',
          hasVoting: i === 0,
          votingQuestion: i === 0 ? '–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è?' : null,
          hasMoneyCollection: false,
          eventDateTime: new Date(Date.now() + (i + 1) * 24 * 60 * 60 * 1000),
          isActive: true,
          createdBy: eventCreator.id,
          communityId: community.id,
        }
      });
      events.push(event);
      console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ "${event.title}" (ID: ${event.id})`);
    }

    console.log('\n5Ô∏è‚É£  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–æ–±—ã—Ç–∏—è...');
    for (const event of events) {
      for (const user of createdUsers) {
        await prisma.usersOnEvents.create({
          data: {
            userId: user.id,
            eventId: event.id,
          }
        });
      }
      console.log(`   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ "${event.title}"`);
    }

    console.log('\n6Ô∏è‚É£  –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...');
    const properties = [];
    for (let i = 0; i < 2; i++) {
      const property = await prisma.property.create({
        data: {
          name: `–¢–µ—Å—Ç–æ–≤–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å ${i + 1}`,
          category: 'PRIVATE_HOUSE',
          latitude: 55.7500 + (i * 0.001),
          longitude: 37.6100 + (i * 0.001),
          photo: null,
          isActive: true,
          userId: propertyOwner.id,
          verificationStatus: 'UNVERIFIED',
        }
      });
      properties.push(property);
      console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å "${property.name}" (ID: ${property.id})`);
    }

    console.log('\n7Ô∏è‚É£  –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...');
    for (const property of properties) {
      for (const user of createdUsers.slice(0, 2)) { // –ü–µ—Ä–≤—ã–µ 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç
        await prisma.propertyVerification.create({
          data: {
            propertyId: property.id,
            userId: user.id,
          }
        });
      }
      console.log(`   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è "${property.name}"`);
    }

    console.log('\n8Ô∏è‚É£  –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è...');
    if (events[0].hasVoting) {
      const votingOptions = await Promise.all([
        prisma.votingOption.create({
          data: { eventId: events[0].id, text: '–í–∞—Ä–∏–∞–Ω—Ç 1' }
        }),
        prisma.votingOption.create({
          data: { eventId: events[0].id, text: '–í–∞—Ä–∏–∞–Ω—Ç 2' }
        })
      ]);

      // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–∞
      for (let i = 0; i < createdUsers.length; i++) {
        await prisma.voting.create({
          data: {
            eventId: events[0].id,
            votingOptionId: votingOptions[i % 2].id,
            userId: createdUsers[i].id,
          }
        });
      }
      console.log(`   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ –≥–æ–ª–æ—Å–∞`);
    }

    console.log('\nüéâ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –°–í–Ø–ó–Ø–ú–ò –°–û–ó–î–ê–ù–´!');
    console.log('=' .repeat(50));
    console.log('üìä –ß—Ç–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ:');
    console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${createdUsers.length}`);
    console.log(`   üèòÔ∏è  –°–æ–æ–±—â–µ—Å—Ç–≤–∞: 1`);
    console.log(`   üìÖ –°–æ–±—ã—Ç–∏—è: ${events.length}`);
    console.log(`   üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å: ${properties.length}`);
    console.log(`   ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${properties.length * 2}`);
    console.log(`   üó≥Ô∏è  –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ${createdUsers.length}`);

    console.log('\nüß™ –¢–ï–ü–ï–†–¨ –ú–û–ñ–ù–û –¢–ï–°–¢–ò–†–û–í–ê–¢–¨ –°–õ–û–ñ–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï:');
    console.log('-' .repeat(50));
    console.log('üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    createdUsers.forEach(user => {
      console.log(`   ID: ${user.id} - ${user.firstName} ${user.lastName}`);
      if (user.id === communityCreator.id) console.log(`     üëë –°–æ–∑–¥–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞`);
      if (user.id === eventCreator.id) console.log(`     üìÖ –°–æ–∑–¥–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π`);
      if (user.id === propertyOwner.id) console.log(`     üè† –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏`);
    });

    console.log('\nüí° –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞:');
    console.log('   ‚Ä¢ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞/—Å–æ–±—ã—Ç–∏—è –Ω–∞ –∞–¥–º–∏–Ω–∞');
    console.log('   ‚Ä¢ –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏—è—Ö –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö');
    console.log('   ‚Ä¢ –£–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å–∞ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    console.log('   ‚Ä¢ –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å');

    return createdUsers;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–≤—è–∑—è–º–∏:', error.message);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

createUsersWithRelationships();
