"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("@prisma/client");
const prisma = new client_1.PrismaClient();
async function createMessagesToUser1() {
    console.log('üì¨ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –î–õ–Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1 (–∫–∞–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è)...');
    try {
        const otherUsers = await prisma.users.findMany({
            where: {
                status: 'ACTIVE',
                id: { not: 1 }
            },
            select: { id: true, firstName: true, lastName: true }
        });
        if (otherUsers.length < 2) {
            console.log('‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${otherUsers.length} –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π`);
        const events = await prisma.event.findMany({
            where: { isActive: true },
            select: { id: true, title: true },
            take: 3
        });
        await prisma.eventMessage.deleteMany({});
        console.log('üßπ –û—á–∏—â–µ–Ω—ã –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
        const messagesForUser1 = [
            '–ü—Ä–∏–≤–µ—Ç! –¢—ã –∏–¥–µ—à—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?',
            '–ù—É–∂–Ω–∞ —Ç–≤–æ—è –ø–æ–º–æ—â—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π',
            '–ú–æ–∂–µ—à—å –ø—Ä–∏–Ω–µ—Å—Ç–∏ –≤–æ–¥—É?',
            '–£–≤–∏–¥–∏–º—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ!',
            '–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!',
            '–ù–µ –∑–∞–±—É–¥—å –≤–∑—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã',
            '–í—Ä–µ–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –Ω–∞ 15:00',
            '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!',
            '–ñ–¥–µ–º —Ç–µ–±—è –∑–∞–≤—Ç—Ä–∞',
            '–ú–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π?'
        ];
        let totalMessages = 0;
        for (const event of events) {
            console.log(`\nüìù –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ "${event.title}" (ID: ${event.id})`);
            const messageCount = 3 + Math.floor(Math.random() * 3);
            for (let i = 0; i < messageCount; i++) {
                const randomSender = otherUsers[Math.floor(Math.random() * otherUsers.length)];
                const randomMessage = messagesForUser1[Math.floor(Math.random() * messagesForUser1.length)];
                await prisma.eventMessage.create({
                    data: {
                        text: `${randomMessage} #${i + 1}`,
                        userId: randomSender.id,
                        eventId: event.id,
                        createdAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000),
                    }
                });
                totalMessages++;
            }
            const ownMessages = Math.floor(Math.random() * 2) + 1;
            for (let i = 0; i < ownMessages; i++) {
                await prisma.eventMessage.create({
                    data: {
                        text: `–ú–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–±—ã—Ç–∏–∏ ${event.title} #${i + 1}`,
                        userId: 1,
                        eventId: event.id,
                        createdAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000),
                    }
                });
                totalMessages++;
            }
            console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π –î–õ–Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1 –∏ ${ownMessages} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1`);
        }
        await prisma.eventRead.deleteMany({});
        if (events.length > 0) {
            await prisma.eventRead.create({
                data: {
                    userId: 1,
                    eventId: events[0].id,
                    readAt: new Date(),
                }
            });
            console.log(`‚úÖ –°–æ–±—ã—Ç–∏–µ ${events[0].id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 1`);
        }
        console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ API (—Å–æ–æ–±—â–µ–Ω–∏—è –î–õ–Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1):');
        for (const event of events) {
            const messagesForUser1Count = await prisma.eventMessage.count({
                where: {
                    eventId: event.id,
                    userId: { not: 1 }
                }
            });
            const isRead = await prisma.eventRead.findFirst({
                where: { userId: 1, eventId: event.id }
            });
            console.log(`–°–æ–±—ã—Ç–∏–µ ${event.id} (${event.title}):`);
            console.log(`  - –°–æ–æ–±—â–µ–Ω–∏–π –î–õ–Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1: ${messagesForUser1Count}`);
            console.log(`  - –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: ${isRead ? '–î–∞' : '–ù–µ—Ç'}`);
            console.log(`  - –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${!isRead && messagesForUser1Count > 0 ? `{"${event.id}":{"notifications":${messagesForUser1Count}}}` : '–Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è'}`);
        }
        console.log(`\nüéâ –°–æ–∑–¥–∞–Ω–æ ${totalMessages} —Å–æ–æ–±—â–µ–Ω–∏–π!`);
        console.log('\nüí° –¢–µ–ø–µ—Ä—å API –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –î–õ–Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1 (–∫–∞–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è)');
    }
    catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
    finally {
        await prisma.$disconnect();
    }
}
createMessagesToUser1();
//# sourceMappingURL=create-messages-to-user1.js.map