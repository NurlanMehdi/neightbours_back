"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("@prisma/client");
const prisma = new client_1.PrismaClient();
async function testApiDirect() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ API –Ω–∞–ø—Ä—è–º—É—é...');
    try {
        const userId = 1;
        console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}`);
        const readEventIds = await prisma.eventRead.findMany({
            where: { userId },
            select: { eventId: true },
        });
        const readEventIdList = readEventIds.map(read => read.eventId);
        console.log(`üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: ${readEventIdList.join(', ') || '–Ω–µ—Ç'}`);
        const allEvents = await prisma.event.findMany({
            select: { id: true, title: true }
        });
        console.log(`üìù –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: ${allEvents.length}`);
        const unreadEventIds = allEvents
            .filter(event => !readEventIdList.includes(event.id))
            .map(event => event.id);
        console.log(`‚ùå –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: ${unreadEventIds.join(', ')}`);
        if (unreadEventIds.length === 0) {
            console.log('‚ÑπÔ∏è  –í—Å–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω—ã - API –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç {}');
            return;
        }
        const whereClause = {
            userId: { not: userId },
            eventId: { in: unreadEventIds }
        };
        console.log('\nüîç –£—Å–ª–æ–≤–∏–µ –ø–æ–∏—Å–∫–∞:', JSON.stringify(whereClause, null, 2));
        const groupedMessages = await prisma.eventMessage.groupBy({
            by: ['eventId'],
            where: whereClause,
            _count: { id: true },
        });
        console.log(`üí¨ –ì—Ä—É–ø–ø —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: ${groupedMessages.length}`);
        const result = {};
        groupedMessages.forEach(group => {
            result[group.eventId.toString()] = {
                notifications: group._count.id,
            };
        });
        console.log('\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç API:');
        console.log(JSON.stringify(result, null, 2));
        console.log('\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:');
        for (const eventId of unreadEventIds) {
            const messages = await prisma.eventMessage.findMany({
                where: {
                    eventId,
                    userId: { not: userId }
                },
                include: {
                    user: { select: { id: true, firstName: true, lastName: true } }
                }
            });
            console.log(`–°–æ–±—ã—Ç–∏–µ ${eventId}: ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
            messages.forEach(msg => {
                console.log(`  - –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${msg.user.firstName} ${msg.user.lastName} (ID: ${msg.userId}): "${msg.text}"`);
            });
        }
    }
    catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
    finally {
        await prisma.$disconnect();
    }
}
testApiDirect();
//# sourceMappingURL=test-api-direct.js.map