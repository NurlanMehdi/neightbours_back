"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("@prisma/client");
const prisma = new client_1.PrismaClient();
async function seedVerificationsData() {
    console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    try {
        const users = await Promise.all([
            prisma.users.upsert({
                where: { phone: '+79001234567' },
                update: {},
                create: {
                    phone: '+79001234567',
                    firstName: '–ò–≤–∞–Ω',
                    lastName: '–ü–µ—Ç—Ä–æ–≤',
                    role: client_1.UserRole.USER,
                    status: client_1.UserStatus.ACTIVE,
                    isVerified: true,
                    registrationStep: 4,
                    latitude: 55.7558,
                    longitude: 37.6176,
                    address: '–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 1',
                },
            }),
            prisma.users.upsert({
                where: { phone: '+79001234568' },
                update: {},
                create: {
                    phone: '+79001234568',
                    firstName: '–ú–∞—Ä–∏—è',
                    lastName: '–ò–≤–∞–Ω–æ–≤–∞',
                    role: client_1.UserRole.USER,
                    status: client_1.UserStatus.ACTIVE,
                    isVerified: true,
                    registrationStep: 4,
                    latitude: 55.7558,
                    longitude: 37.6176,
                    address: '–ú–æ—Å–∫–≤–∞, —É–ª. –ê—Ä–±–∞—Ç, –¥. 5',
                },
            }),
            prisma.users.upsert({
                where: { phone: '+79001234569' },
                update: {},
                create: {
                    phone: '+79001234569',
                    firstName: '–ê–ª–µ–∫—Å–µ–π',
                    lastName: '–°–∏–¥–æ—Ä–æ–≤',
                    role: client_1.UserRole.USER,
                    status: client_1.UserStatus.ACTIVE,
                    isVerified: true,
                    registrationStep: 4,
                    latitude: 55.7558,
                    longitude: 37.6176,
                    address: '–ú–æ—Å–∫–≤–∞, —É–ª. –ö—Ä–∞—Å–Ω–∞—è –ü–ª–æ—â–∞–¥—å, –¥. 1',
                },
            }),
            prisma.users.upsert({
                where: { phone: '+79001234570' },
                update: {},
                create: {
                    phone: '+79001234570',
                    firstName: '–ï–ª–µ–Ω–∞',
                    lastName: '–ö–æ–∑–ª–æ–≤–∞',
                    role: client_1.UserRole.USER,
                    status: client_1.UserStatus.ACTIVE,
                    isVerified: true,
                    registrationStep: 4,
                    latitude: 55.7558,
                    longitude: 37.6176,
                    address: '–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –¥. 10',
                },
            }),
        ]);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        const properties = await Promise.all([
            prisma.property.create({
                data: {
                    name: '–ß–∞—Å—Ç–Ω—ã–π –¥–æ–º –Ω–∞ –†—É–±–ª–µ–≤–∫–µ',
                    category: client_1.PropertyCategory.PRIVATE_HOUSE,
                    latitude: 55.7558,
                    longitude: 37.6176,
                    photo: '/uploads/house1.jpg',
                    userId: users[0].id,
                    verificationStatus: client_1.PropertyVerificationStatus.VERIFIED,
                },
            }),
            prisma.property.create({
                data: {
                    name: '–¢–∞—É–Ω—Ö–∞—É—Å –≤ –ñ—É–∫–æ–≤–∫–µ',
                    category: client_1.PropertyCategory.TOWNHOUSE,
                    latitude: 55.7658,
                    longitude: 37.6276,
                    photo: '/uploads/townhouse1.jpg',
                    userId: users[1].id,
                    verificationStatus: client_1.PropertyVerificationStatus.VERIFIED,
                },
            }),
            prisma.property.create({
                data: {
                    name: '–ö–æ—Ç—Ç–µ–¥–∂ —É –æ–∑–µ—Ä–∞',
                    category: client_1.PropertyCategory.COTTAGE,
                    latitude: 55.7458,
                    longitude: 37.6076,
                    photo: '/uploads/cottage1.jpg',
                    userId: users[0].id,
                    verificationStatus: client_1.PropertyVerificationStatus.UNVERIFIED,
                },
            }),
            prisma.property.create({
                data: {
                    name: '–ó–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ 15 —Å–æ—Ç–æ–∫',
                    category: client_1.PropertyCategory.LAND,
                    latitude: 55.7358,
                    longitude: 37.5976,
                    userId: users[2].id,
                    verificationStatus: client_1.PropertyVerificationStatus.VERIFIED,
                },
            }),
            prisma.property.create({
                data: {
                    name: '–î–æ–º –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞',
                    category: client_1.PropertyCategory.PRIVATE_HOUSE,
                    latitude: 55.7758,
                    longitude: 37.6376,
                    photo: '/uploads/house2.jpg',
                    userId: users[2].id,
                    verificationStatus: client_1.PropertyVerificationStatus.UNVERIFIED,
                },
            }),
            prisma.property.create({
                data: {
                    name: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–∞—É–Ω—Ö–∞—É—Å',
                    category: client_1.PropertyCategory.TOWNHOUSE,
                    latitude: 55.7858,
                    longitude: 37.6476,
                    photo: '/uploads/townhouse2.jpg',
                    userId: users[3].id,
                    verificationStatus: client_1.PropertyVerificationStatus.VERIFIED,
                },
            }),
        ]);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${properties.length} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏`);
        const verifications = [
            { propertyId: properties[1].id, userId: users[0].id },
            { propertyId: properties[3].id, userId: users[0].id },
            { propertyId: properties[5].id, userId: users[0].id },
            { propertyId: properties[0].id, userId: users[1].id },
            { propertyId: properties[3].id, userId: users[1].id },
            { propertyId: properties[4].id, userId: users[1].id },
            { propertyId: properties[0].id, userId: users[2].id },
            { propertyId: properties[1].id, userId: users[2].id },
            { propertyId: properties[5].id, userId: users[2].id },
            { propertyId: properties[0].id, userId: users[3].id },
            { propertyId: properties[1].id, userId: users[3].id },
            { propertyId: properties[3].id, userId: users[3].id },
        ];
        for (let i = 0; i < verifications.length; i++) {
            const verification = verifications[i];
            const createdAt = new Date();
            createdAt.setDate(createdAt.getDate() - Math.floor(Math.random() * 30));
            await prisma.propertyVerification.upsert({
                where: {
                    propertyId_userId: {
                        propertyId: verification.propertyId,
                        userId: verification.userId,
                    },
                },
                update: {},
                create: {
                    propertyId: verification.propertyId,
                    userId: verification.userId,
                    createdAt,
                },
            });
        }
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${verifications.length} –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π`);
        for (const property of properties) {
            const verificationsCount = await prisma.propertyVerification.count({
                where: { propertyId: property.id },
            });
            if (verificationsCount >= 2) {
                await prisma.property.update({
                    where: { id: property.id },
                    data: { verificationStatus: client_1.PropertyVerificationStatus.VERIFIED },
                });
            }
        }
        console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è API –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
        console.log('\nüìä –°–æ–∑–¥–∞–Ω–æ:');
        console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.length}`);
        console.log(`üè† –û–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: ${properties.length}`);
        console.log(`‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${verifications.length}`);
        console.log('\nüîç –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API:');
        console.log('GET /api/users/verifications - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        console.log('\nüì± –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
        users.forEach((user, index) => {
            console.log(`${index + 1}. ${user.firstName} ${user.lastName} (${user.phone}) - ID: ${user.id}`);
        });
    }
    catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    }
}
seedVerificationsData()
    .catch((e) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', e);
    process.exit(1);
})
    .finally(async () => {
    await prisma.$disconnect();
});
//# sourceMappingURL=seed-verifications.js.map