"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("@prisma/client");
const prisma = new client_1.PrismaClient();
async function verifySeedData() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...\n');
    try {
        const eventCategories = await prisma.eventCategory.findMany({
            orderBy: { type: 'asc' },
        });
        console.log('üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π:');
        eventCategories.forEach((category, index) => {
            console.log(`${index + 1}. ${category.name} (${category.type}) - ${category.color || '–±–µ–∑ —Ü–≤–µ—Ç–∞'}`);
        });
        const events = await prisma.event.findMany({
            include: {
                category: true,
                community: {
                    select: {
                        name: true,
                    },
                },
                creator: {
                    select: {
                        firstName: true,
                        lastName: true,
                    },
                },
                votingOptions: true,
                participants: {
                    include: {
                        user: {
                            select: {
                                firstName: true,
                                lastName: true,
                            },
                        },
                    },
                },
            },
            orderBy: { createdAt: 'desc' },
        });
        console.log(`\nüéâ –°–æ–±—ã—Ç–∏—è (–≤—Å–µ–≥–æ: ${events.length}):`);
        events.forEach((event, index) => {
            const creatorName = `${event.creator.firstName || ''} ${event.creator.lastName || ''}`.trim() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
            const participantsCount = event.participants.length;
            const hasVoting = event.votingOptions.length > 0;
            console.log(`\n${index + 1}. "${event.title}" (${event.type})`);
            console.log(`   üìç –°–æ–æ–±—â–µ—Å—Ç–≤–æ: ${event.community.name}`);
            console.log(`   üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: ${creatorName}`);
            console.log(`   üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${event.category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}`);
            console.log(`   üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${participantsCount}`);
            if (hasVoting) {
                console.log(`   üó≥Ô∏è  –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: "${event.votingQuestion}"`);
                console.log(`   üìù –í–∞—Ä–∏–∞–Ω—Ç—ã: ${event.votingOptions.map(o => `"${o.text}"`).join(', ')}`);
            }
            if (event.hasMoneyCollection && event.moneyAmount) {
                console.log(`   üí∞ –°–±–æ—Ä —Å—Ä–µ–¥—Å—Ç–≤: ${event.moneyAmount} —Ä—É–±.`);
            }
            if (event.eventDateTime) {
                console.log(`   üìÖ –î–∞—Ç–∞: ${event.eventDateTime.toLocaleDateString('ru-RU')}`);
            }
        });
        const participantsCount = await prisma.usersOnEvents.count();
        console.log(`\nüë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π: ${participantsCount}`);
        const votingOptionsCount = await prisma.votingOption.count();
        console.log(`üó≥Ô∏è  –í—Å–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ${votingOptionsCount}`);
        console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    }
    catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    }
    finally {
        await prisma.$disconnect();
    }
}
verifySeedData()
    .catch((error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});
//# sourceMappingURL=verify-seed.js.map