"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("@prisma/client");
const prisma = new client_1.PrismaClient();
async function seedEventsAndCategories() {
    console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏...');
    try {
        const users = await prisma.users.findMany({
            where: { status: 'ACTIVE' },
            take: 10,
        });
        const communities = await prisma.community.findMany({
            where: { isActive: true },
            take: 5,
        });
        if (users.length === 0) {
            console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞.');
            return;
        }
        if (communities.length === 0) {
            console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤. –°–æ–∑–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞.');
            return;
        }
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ ${communities.length} —Å–æ–æ–±—â–µ—Å—Ç–≤`);
        const eventCategories = [
            {
                name: '–°–ø–æ—Ä—Ç',
                icon: 'sport.svg',
                type: client_1.EventType.EVENT,
                color: null,
            },
            {
                name: '–ö—É–ª—å—Ç—É—Ä–∞',
                icon: 'culture.svg',
                type: client_1.EventType.EVENT,
                color: null,
            },
            {
                name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                icon: 'education.svg',
                type: client_1.EventType.EVENT,
                color: null,
            },
            {
                name: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                icon: 'charity.svg',
                type: client_1.EventType.EVENT,
                color: null,
            },
            {
                name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
                icon: 'entertainment.svg',
                type: client_1.EventType.EVENT,
                color: null,
            },
            {
                name: '–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏',
                icon: 'emergency.svg',
                type: client_1.EventType.NOTIFICATION,
                color: '#FF4444',
            },
            {
                name: '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
                icon: 'utilities.svg',
                type: client_1.EventType.NOTIFICATION,
                color: '#FFA500',
            },
            {
                name: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
                icon: 'security.svg',
                type: client_1.EventType.NOTIFICATION,
                color: '#FFD700',
            },
            {
                name: '–û–±—ä—è–≤–ª–µ–Ω–∏—è',
                icon: 'announcements.svg',
                type: client_1.EventType.NOTIFICATION,
                color: '#4CAF50',
            },
        ];
        console.log('üìù –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π...');
        const createdCategories = [];
        for (const categoryData of eventCategories) {
            try {
                const category = await prisma.eventCategory.create({
                    data: categoryData,
                });
                createdCategories.push(category);
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name} (${category.type})`);
            }
            catch (error) {
                if (error.code === 'P2002') {
                    console.log(`‚ö†Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryData.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    const existingCategory = await prisma.eventCategory.findUnique({
                        where: { name: categoryData.name },
                    });
                    if (existingCategory) {
                        createdCategories.push(existingCategory);
                    }
                }
                else {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryData.name}":`, error);
                }
            }
        }
        const eventTemplates = [
            {
                title: '–§—É—Ç–±–æ–ª—å–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä',
                description: '–î—Ä—É–∂–µ—Å–∫–∏–π —Ç—É—Ä–Ω–∏—Ä –ø–æ —Ñ—É—Ç–±–æ–ª—É –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ –∂–∏—Ç–µ–ª–µ–π —Ä–∞–π–æ–Ω–∞',
                type: client_1.EventType.EVENT,
                categoryName: '–°–ø–æ—Ä—Ç',
                hasVoting: false,
                hasMoneyCollection: false,
                eventDateTime: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
            },
            {
                title: '–£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞',
                description: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —É—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞ –≤ –ø–∞—Ä–∫–µ',
                type: client_1.EventType.EVENT,
                categoryName: '–°–ø–æ—Ä—Ç',
                hasVoting: false,
                hasMoneyCollection: false,
                eventDateTime: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),
            },
            {
                title: '–ö–æ–Ω—Ü–µ—Ä—Ç –≤ –ø–∞—Ä–∫–µ',
                description: '–í–µ—á–µ—Ä–Ω–∏–π –∫–æ–Ω—Ü–µ—Ä—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –º—É–∑—ã–∫–∏ –ø–æ–¥ –æ—Ç–∫—Ä—ã—Ç—ã–º –Ω–µ–±–æ–º',
                type: client_1.EventType.EVENT,
                categoryName: '–ö—É–ª—å—Ç—É—Ä–∞',
                hasVoting: true,
                votingQuestion: '–ö–∞–∫—É—é –º—É–∑—ã–∫—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É—Å–ª—ã—à–∞—Ç—å?',
                votingOptions: [
                    { text: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º—É–∑—ã–∫–∞' },
                    { text: '–î–∂–∞–∑' },
                    { text: '–ù–∞—Ä–æ–¥–Ω–∞—è –º—É–∑—ã–∫–∞' },
                    { text: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º—É–∑—ã–∫–∞' },
                ],
                hasMoneyCollection: true,
                moneyAmount: 5000.0,
                eventDateTime: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000),
            },
            {
                title: '–í—ã—Å—Ç–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω',
                description: '–í—ã—Å—Ç–∞–≤–∫–∞ —Ä–∞–±–æ—Ç –º–µ—Å—Ç–Ω—ã—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ –≤ –∫—É–ª—å—Ç—É—Ä–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ',
                type: client_1.EventType.EVENT,
                categoryName: '–ö—É–ª—å—Ç—É—Ä–∞',
                hasVoting: false,
                hasMoneyCollection: false,
                eventDateTime: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000),
            },
            {
                title: '–õ–µ–∫—Ü–∏—è –ø–æ —Å–∞–¥–æ–≤–æ–¥—Å—Ç–≤—É',
                description: '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—é –æ–≤–æ—â–µ–π –Ω–∞ –ø—Ä–∏—É—Å–∞–¥–µ–±–Ω–æ–º —É—á–∞—Å—Ç–∫–µ',
                type: client_1.EventType.EVENT,
                categoryName: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                hasVoting: false,
                hasMoneyCollection: false,
                eventDateTime: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),
            },
            {
                title: '–ö—É—Ä—Å—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏',
                description: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è –ø–æ–∂–∏–ª—ã—Ö –ª—é–¥–µ–π –ø–æ –æ—Å–Ω–æ–≤–∞–º —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º',
                type: client_1.EventType.EVENT,
                categoryName: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                hasVoting: true,
                votingQuestion: '–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º —É–¥–æ–±–Ω–µ–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è?',
                votingOptions: [
                    { text: '–£—Ç—Ä–æ–º (9:00-11:00)' },
                    { text: '–î–Ω–µ–º (14:00-16:00)' },
                    { text: '–í–µ—á–µ—Ä–æ–º (18:00-20:00)' },
                ],
                hasMoneyCollection: false,
                eventDateTime: new Date(Date.now() + 21 * 24 * 60 * 60 * 1000),
            },
            {
                title: '–°–±–æ—Ä —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –¥–µ—Ç—Å–∫—É—é –ø–ª–æ—â–∞–¥–∫—É',
                description: '–°–æ–±–∏—Ä–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç—Å–∫–æ–π –ø–ª–æ—â–∞–¥–∫–∏ –≤–æ –¥–≤–æ—Ä–µ',
                type: client_1.EventType.EVENT,
                categoryName: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                hasVoting: true,
                votingQuestion: '–ö–∞–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?',
                votingOptions: [
                    { text: '–ö–∞—á–µ–ª–∏' },
                    { text: '–ì–æ—Ä–∫–∞' },
                    { text: '–ü–µ—Å–æ—á–Ω–∏—Ü–∞' },
                    { text: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å' },
                ],
                hasMoneyCollection: true,
                moneyAmount: 50000.0,
                eventDateTime: null,
            },
            {
                title: '–ü–æ–º–æ—â—å –ø–æ–∂–∏–ª—ã–º —Å–æ—Å–µ–¥—è–º',
                description: '–í–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∞—è –ø–æ–º–æ—â—å –ø–æ–∂–∏–ª—ã–º –∂–∏—Ç–µ–ª—è–º —Ä–∞–π–æ–Ω–∞',
                type: client_1.EventType.EVENT,
                categoryName: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                hasVoting: false,
                hasMoneyCollection: false,
                eventDateTime: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000),
            },
            {
                title: '–ë–∞—Ä–±–µ–∫—é-–≤–µ—á–µ—Ä–∏–Ω–∫–∞',
                description: '–°–æ–≤–º–µ—Å—Ç–Ω—ã–π —É–∂–∏–Ω –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ —Å –≥—Ä–∏–ª–µ–º –∏ –∏–≥—Ä–∞–º–∏',
                type: client_1.EventType.EVENT,
                categoryName: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
                hasVoting: true,
                votingQuestion: '–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–º –Ω–∞ –≥—Ä–∏–ª–µ?',
                votingOptions: [
                    { text: '–ú—è—Å–æ' },
                    { text: '–†—ã–±–∞' },
                    { text: '–û–≤–æ—â–∏' },
                    { text: '–í—Å–µ –≤–º–µ—Å—Ç–µ' },
                ],
                hasMoneyCollection: true,
                moneyAmount: 3000.0,
                eventDateTime: new Date(Date.now() + 6 * 24 * 60 * 60 * 1000),
            },
            {
                title: '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–æ–¥—ã',
                description: '–ü–ª–∞–Ω–æ–≤–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã —Å 9:00 –¥–æ 18:00',
                type: client_1.EventType.NOTIFICATION,
                categoryName: '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
                hasVoting: false,
                hasMoneyCollection: false,
                eventDateTime: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000),
            },
            {
                title: '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                description: '–ó–∞–º–µ—á–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ–∑–ª–µ –¥–æ–º–∞ 15. –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã.',
                type: client_1.EventType.NOTIFICATION,
                categoryName: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
                hasVoting: false,
                hasMoneyCollection: false,
                eventDateTime: null,
            },
            {
                title: '–°–æ–±—Ä–∞–Ω–∏–µ –∂–∏–ª—å—Ü–æ–≤',
                description: '–û–±—â–µ–µ —Å–æ–±—Ä–∞–Ω–∏–µ –∂–∏–ª—å—Ü–æ–≤ –¥–æ–º–∞ –ø–æ –≤–æ–ø—Ä–æ—Å—É –∫–∞–ø–∏—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞',
                type: client_1.EventType.NOTIFICATION,
                categoryName: '–û–±—ä—è–≤–ª–µ–Ω–∏—è',
                hasVoting: false,
                hasMoneyCollection: false,
                eventDateTime: new Date(Date.now() + 4 * 24 * 60 * 60 * 1000),
            },
        ];
        console.log('üéâ –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è...');
        let createdEventsCount = 0;
        for (const eventTemplate of eventTemplates) {
            try {
                const category = createdCategories.find(c => c.name === eventTemplate.categoryName);
                if (!category) {
                    console.log(`‚ö†Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${eventTemplate.categoryName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ "${eventTemplate.title}"`);
                    continue;
                }
                const randomUser = users[Math.floor(Math.random() * users.length)];
                const randomCommunity = communities[Math.floor(Math.random() * communities.length)];
                const eventData = {
                    title: eventTemplate.title,
                    description: eventTemplate.description,
                    latitude: randomCommunity.latitude + (Math.random() - 0.5) * 0.01,
                    longitude: randomCommunity.longitude + (Math.random() - 0.5) * 0.01,
                    type: eventTemplate.type,
                    hasVoting: eventTemplate.hasVoting,
                    votingQuestion: eventTemplate.votingQuestion || null,
                    hasMoneyCollection: eventTemplate.hasMoneyCollection,
                    moneyAmount: eventTemplate.moneyAmount || null,
                    eventDateTime: eventTemplate.eventDateTime,
                    isActive: true,
                    createdBy: randomUser.id,
                    communityId: randomCommunity.id,
                    categoryId: category.id,
                };
                let event;
                if (eventTemplate.hasVoting && eventTemplate.votingOptions) {
                    event = await prisma.event.create({
                        data: {
                            ...eventData,
                            votingOptions: {
                                create: eventTemplate.votingOptions,
                            },
                        },
                        include: {
                            votingOptions: true,
                            category: true,
                            creator: {
                                select: {
                                    id: true,
                                    firstName: true,
                                    lastName: true,
                                },
                            },
                            community: {
                                select: {
                                    id: true,
                                    name: true,
                                },
                            },
                        },
                    });
                }
                else {
                    event = await prisma.event.create({
                        data: eventData,
                        include: {
                            category: true,
                            creator: {
                                select: {
                                    id: true,
                                    firstName: true,
                                    lastName: true,
                                },
                            },
                            community: {
                                select: {
                                    id: true,
                                    name: true,
                                },
                            },
                        },
                    });
                }
                createdEventsCount++;
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: "${event.title}" (${event.type}) –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ "${event.community.name}"`);
                if (event.type === client_1.EventType.EVENT) {
                    const participantsCount = Math.floor(Math.random() * Math.min(5, users.length)) + 1;
                    const shuffledUsers = [...users].sort(() => Math.random() - 0.5);
                    for (let i = 0; i < participantsCount; i++) {
                        try {
                            await prisma.usersOnEvents.create({
                                data: {
                                    userId: shuffledUsers[i].id,
                                    eventId: event.id,
                                },
                            });
                        }
                        catch (error) {
                            if (error.code !== 'P2002') {
                                console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${shuffledUsers[i].id} –∫ —Å–æ–±—ã—Ç–∏—é ${event.id}`);
                            }
                        }
                    }
                }
            }
            catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è "${eventTemplate.title}":`, error);
            }
        }
        console.log(`\nüéä –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–æ: ${createdCategories.length}`);
        console.log(`   ‚Ä¢ –°–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–æ: ${createdEventsCount}`);
        console.log(`   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${users.length}`);
        console.log(`   ‚Ä¢ –°–æ–æ–±—â–µ—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${communities.length}`);
    }
    catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    }
    finally {
        await prisma.$disconnect();
    }
}
seedEventsAndCategories()
    .catch((error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});
//# sourceMappingURL=seed-events.js.map