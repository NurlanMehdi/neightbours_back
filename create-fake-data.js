"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("@prisma/client");
const prisma = new client_1.PrismaClient();
async function createFakeData() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...');
        const users = await prisma.users.findMany({
            select: { id: true, firstName: true, lastName: true, phone: true }
        });
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', users);
        const communities = await prisma.community.findMany({
            select: { id: true, name: true }
        });
        console.log('–°–æ–æ–±—â–µ—Å—Ç–≤–∞:', communities);
        const categories = await prisma.eventCategory.findMany({
            select: { id: true, name: true, type: true }
        });
        console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π:', categories);
        let community;
        if (communities.length === 0) {
            community = await prisma.community.create({
                data: {
                    name: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ',
                    description: '–°–æ–æ–±—â–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                    latitude: 55.7558,
                    longitude: 37.6176,
                    createdBy: users[0].id,
                }
            });
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ:', community);
        }
        else {
            community = communities[0];
            console.log('üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ:', community);
        }
        let category;
        if (categories.length === 0) {
            category = await prisma.eventCategory.create({
                data: {
                    name: '–û–±—â–µ–µ —Å–æ–±—Ä–∞–Ω–∏–µ',
                    icon: 'üè†',
                    color: '#2563eb',
                    type: 'EVENT',
                }
            });
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', category);
        }
        else {
            category = categories[0];
            console.log('üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', category);
        }
        await prisma.usersOnCommunities.upsert({
            where: {
                userId_communityId: {
                    userId: users[0].id,
                    communityId: community.id,
                }
            },
            update: {},
            create: {
                userId: users[0].id,
                communityId: community.id,
            }
        });
        const additionalUsers = [];
        for (let i = 2; i <= 4; i++) {
            const user = await prisma.users.upsert({
                where: { phone: `7909784450${i}` },
                update: {},
                create: {
                    phone: `7909784450${i}`,
                    firstName: `–¢–µ—Å—Ç–æ–≤—ã–π${i}`,
                    lastName: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å${i}`,
                    role: 'USER',
                    isVerified: true,
                    registrationStep: 4,
                }
            });
            additionalUsers.push(user);
            await prisma.usersOnCommunities.upsert({
                where: {
                    userId_communityId: {
                        userId: user.id,
                        communityId: community.id,
                    }
                },
                update: {},
                create: {
                    userId: user.id,
                    communityId: community.id,
                }
            });
        }
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', additionalUsers.length);
        const events = [];
        const eventData = [
            {
                title: '–°–æ–±—Ä–∞–Ω–∏–µ –∂–∏–ª—å—Ü–æ–≤',
                description: '–û–±—Å—É–∂–¥–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏',
                type: 'EVENT',
                hasVoting: true,
                votingQuestion: '–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤—ã—Ö –¥–µ—Ç—Å–∫–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫?',
                eventDateTime: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
            },
            {
                title: '–£–±–æ—Ä–∫–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏',
                description: '–°—É–±–±–æ—Ç–Ω–∏–∫ –¥–ª—è –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–≤–æ—Ä–∞',
                type: 'EVENT',
                hasVoting: false,
                eventDateTime: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),
            },
            {
                title: '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–æ–¥—ã',
                description: '–ü–ª–∞–Ω–æ–≤–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã —Å 9:00 –¥–æ 18:00',
                type: 'NOTIFICATION',
                hasVoting: false,
                eventDateTime: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000),
            }
        ];
        for (const data of eventData) {
            const event = await prisma.event.create({
                data: {
                    ...data,
                    latitude: 55.7558 + Math.random() * 0.01,
                    longitude: 37.6176 + Math.random() * 0.01,
                    categoryId: category.id,
                    communityId: community.id,
                    createdBy: users[0].id,
                }
            });
            events.push(event);
            if (data.hasVoting) {
                await prisma.votingOption.createMany({
                    data: [
                        { eventId: event.id, text: '–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω' },
                        { eventId: event.id, text: '–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω' },
                        { eventId: event.id, text: '–í–æ–∑–¥–µ—Ä–∂—É—Å—å' },
                    ]
                });
            }
            const allUsers = [users[0], ...additionalUsers];
            for (const user of allUsers) {
                await prisma.usersOnEvents.upsert({
                    where: {
                        userId_eventId: {
                            userId: user.id,
                            eventId: event.id,
                        }
                    },
                    update: {},
                    create: {
                        userId: user.id,
                        eventId: event.id,
                    }
                });
            }
        }
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π:', events.length);
        const messages = [];
        const messageTexts = [
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!',
            '–ù–∞–ø–æ–º–∏–Ω–∞—é –≤—Å–µ–º –æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è',
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤–æ–≤—Ä–µ–º—è',
            '–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–¥–∞–≤–∞–π—Ç–µ –∑–¥–µ—Å—å',
            '–£–≤–∏–¥–∏–º—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!',
            '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π –¥–æ–∫—É–º–µ–Ω—Ç—ã',
            '–ñ–¥–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
            '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É–∂–µ –≥–æ—Ç–æ–≤–∞',
            '–ë—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!',
            '–î–æ –≤—Å—Ç—Ä–µ—á–∏!',
        ];
        const allUsers = [users[0], ...additionalUsers];
        for (const event of events) {
            const messageCount = 5 + Math.floor(Math.random() * 4);
            for (let i = 0; i < messageCount; i++) {
                const randomUser = allUsers[Math.floor(Math.random() * allUsers.length)];
                const randomText = messageTexts[Math.floor(Math.random() * messageTexts.length)];
                const message = await prisma.eventMessage.create({
                    data: {
                        text: `${randomText} #${i + 1}`,
                        userId: randomUser.id,
                        eventId: event.id,
                        createdAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000),
                    }
                });
                messages.push(message);
            }
        }
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', messages.length);
        console.log('\nüéâ –§–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
        console.log(`üìä –ò—Ç–æ–≥–æ:`);
        console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsers.length}`);
        console.log(`   - –°–æ–æ–±—â–µ—Å—Ç–≤: 1`);
        console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: 1`);
        console.log(`   - –°–æ–±—ã—Ç–∏–π: ${events.length}`);
        console.log(`   - –°–æ–æ–±—â–µ–Ω–∏–π: ${messages.length}`);
    }
    catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–µ–π–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
    finally {
        await prisma.$disconnect();
    }
}
createFakeData();
//# sourceMappingURL=create-fake-data.js.map