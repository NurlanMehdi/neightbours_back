const jwt = require('jsonwebtoken');

// JWT secret - you'll need to check your .env file for the actual secret
const JWT_SECRET = process.env.JWT_SECRET || 'your-jwt-secret-here';

function generateToken(userId = 3) {
  const payload = {
    sub: userId,
    role: 'ADMIN',
    phone: '77777777777',
    type: 'access',
    iat: Math.floor(Date.now() / 1000),
    exp: Math.floor(Date.now() / 1000) + (12 * 60 * 60) // 12 hours
  };

  try {
    const token = jwt.sign(payload, JWT_SECRET);
    
    console.log('üéØ –ù–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:');
    console.log('=' .repeat(60));
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${userId}`);
    console.log(`–†–æ–ª—å: ${payload.role}`);
    console.log(`–¢–µ–ª–µ—Ñ–æ–Ω: ${payload.phone}`);
    console.log(`–ò—Å—Ç–µ–∫–∞–µ—Ç: ${new Date(payload.exp * 1000).toLocaleString('ru-RU')}`);
    console.log('');
    console.log('–¢–æ–∫–µ–Ω:');
    console.log(token);
    console.log('');
    
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API:');
    console.log('curl -X "GET" \\');
    console.log('  "http://localhost:3000/api/users/verifications?page=1&limit=20&isVerified=true" \\');
    console.log('  -H "accept: application/json" \\');
    console.log(`  -H "Authorization: Bearer ${token}"`);
    
    return token;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error.message);
    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ JWT_SECRET –≤ —Ñ–∞–π–ª–µ .env');
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∏–º JWT_SECRET –∏–∑ .env
console.log('üîç –ü–æ–∏—Å–∫ JWT_SECRET...');
try {
  require('dotenv').config();
  const secret = process.env.JWT_SECRET;
  
  if (!secret) {
    console.log('‚ö†Ô∏è  JWT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
  } else {
    console.log('‚úÖ JWT_SECRET –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
  }
} catch (error) {
  console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª');
}

console.log('');

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
generateToken(3);