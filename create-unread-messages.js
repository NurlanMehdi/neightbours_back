"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("@prisma/client");
const prisma = new client_1.PrismaClient();
async function createUnreadMessages() {
    console.log('üîç –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    try {
        const users = await prisma.users.findMany({
            where: { status: 'ACTIVE' },
            take: 10,
        });
        if (users.length < 2) {
            console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
            return;
        }
        const communities = await prisma.community.findMany({
            where: { isActive: true },
            take: 3,
        });
        if (communities.length === 0) {
            console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤.');
            return;
        }
        let eventCategory = await prisma.eventCategory.findFirst();
        if (!eventCategory) {
            eventCategory = await prisma.eventCategory.create({
                data: {
                    name: '–û–±—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                    description: '–û–±—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                    type: 'EVENT',
                    isActive: true,
                },
            });
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π');
        }
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ ${communities.length} —Å–æ–æ–±—â–µ—Å—Ç–≤`);
        const events = [];
        const eventTitles = [
            '–°–æ–±—Ä–∞–Ω–∏–µ –∂–∏–ª—å—Ü–æ–≤ –¥–æ–º–∞',
            '–°—É–±–±–æ—Ç–Ω–∏–∫ –≤–æ –¥–≤–æ—Ä–µ',
            '–î–µ—Ç—Å–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫',
            '–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞',
            '–ù–æ–≤–æ–≥–æ–¥–Ω—è—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞',
        ];
        for (let i = 0; i < eventTitles.length; i++) {
            const community = communities[i % communities.length];
            const creator = users[i % users.length];
            const event = await prisma.event.create({
                data: {
                    title: eventTitles[i],
                    description: `–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ${eventTitles[i]}`,
                    latitude: community.latitude + (Math.random() - 0.5) * 0.01,
                    longitude: community.longitude + (Math.random() - 0.5) * 0.01,
                    categoryId: eventCategory.id,
                    type: 'EVENT',
                    hasVoting: Math.random() > 0.7,
                    votingQuestion: Math.random() > 0.7 ? '–£—á–∞—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏?' : null,
                    hasMoneyCollection: Math.random() > 0.8,
                    moneyAmount: Math.random() > 0.8 ? 1000 + Math.random() * 5000 : null,
                    eventDateTime: new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000),
                    isActive: true,
                    createdBy: creator.id,
                    communityId: community.id,
                },
            });
            events.push(event);
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: ${event.title}`);
        }
        const messageTexts = [
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!',
            '–ù–∞–ø–æ–º–∏–Ω–∞—é –≤—Å–µ–º –æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è',
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤–æ–≤—Ä–µ–º—è',
            '–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–¥–∞–≤–∞–π—Ç–µ –∑–¥–µ—Å—å',
            '–£–≤–∏–¥–∏–º—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!',
            '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π –¥–æ–∫—É–º–µ–Ω—Ç—ã',
            '–ñ–¥–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
            '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É–∂–µ –≥–æ—Ç–æ–≤–∞',
            '–ë—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!',
            '–î–æ –≤—Å—Ç—Ä–µ—á–∏!',
            '–ö–∞–∫–∏–µ –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è?',
            '–Ø –∑–∞ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!',
            '–ê —á—Ç–æ –¥—É–º–∞—é—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ?',
            '–ö—Ç–æ –±—É–¥–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?',
            '–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è!',
        ];
        let totalMessages = 0;
        for (const event of events) {
            const messageCount = 3 + Math.floor(Math.random() * 6);
            for (let i = 0; i < messageCount; i++) {
                const randomUser = users[Math.floor(Math.random() * users.length)];
                const randomText = messageTexts[Math.floor(Math.random() * messageTexts.length)];
                await prisma.eventMessage.create({
                    data: {
                        text: `${randomText} (—Å–æ–æ–±—â–µ–Ω–∏–µ ${i + 1})`,
                        userId: randomUser.id,
                        eventId: event.id,
                        createdAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000),
                    },
                });
                totalMessages++;
            }
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–±—ã—Ç–∏—è: ${event.title}`);
        }
        for (const user of users.slice(0, Math.floor(users.length / 2))) {
            const eventsToMarkAsRead = events.slice(0, Math.floor(Math.random() * events.length));
            for (const event of eventsToMarkAsRead) {
                await prisma.eventRead.create({
                    data: {
                        userId: user.id,
                        eventId: event.id,
                        readAt: new Date(Date.now() - Math.random() * 2 * 24 * 60 * 60 * 1000),
                    },
                });
            }
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.firstName} ${user.lastName} –ø—Ä–æ—á–∏—Ç–∞–ª ${eventsToMarkAsRead.length} —Å–æ–±—ã—Ç–∏–π`);
        }
        console.log('\nüéâ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã!');
        console.log(`üìä –ò—Ç–æ–≥–æ:`);
        console.log(`   - –°–æ–±—ã—Ç–∏–π: ${events.length}`);
        console.log(`   - –°–æ–æ–±—â–µ–Ω–∏–π: ${totalMessages}`);
        console.log(`   - –ß–∞—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ—á–∏—Ç–∞–ª–∏ —á–∞—Å—Ç—å —Å–æ–±—ã—Ç–∏–π`);
        console.log('\nüìù –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API /api/events/messages/unread');
    }
    catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
    finally {
        await prisma.$disconnect();
    }
}
createUnreadMessages();
//# sourceMappingURL=create-unread-messages.js.map