const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

// –ú–∞—Å—Å–∏–≤—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const russianMaleNames = [
  '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–î–º–∏—Ç—Ä–∏–π', '–ú–∞–∫—Å–∏–º', '–°–µ—Ä–≥–µ–π', '–ê–Ω–¥—Ä–µ–π', '–ê–ª–µ–∫—Å–µ–π', '–ê—Ä—Ç—ë–º', '–ò–ª—å—è', 
  '–ö–∏—Ä–∏–ª–ª', '–ú–∏—Ö–∞–∏–ª', '–ù–∏–∫–∏—Ç–∞', '–ú–∞—Ç–≤–µ–π', '–†–æ–º–∞–Ω', '–ï–≥–æ—Ä', '–ê—Ä—Å–µ–Ω–∏–π', '–ò–≤–∞–Ω', 
  '–î–µ–Ω–∏—Å', '–ï–≤–≥–µ–Ω–∏–π', '–î–∞–Ω–∏–ª', '–¢–∏–º—É—Ä', '–í–ª–∞–¥–∏—Å–ª–∞–≤', '–ò–≥–æ—Ä—å', '–í–ª–∞–¥–∏–º–∏—Ä', '–ü–∞–≤–µ–ª'
];

const russianFemaleNames = [
  '–°–æ—Ñ–∏—è', '–ú–∞—Ä–∏—è', '–ê–Ω–Ω–∞', '–í–∏–∫—Ç–æ—Ä–∏—è', '–ê–Ω–∞—Å—Ç–∞—Å–∏—è', '–ü–æ–ª–∏–Ω–∞', '–ê–ª–∏—Å–∞', '–ï–ª–∏–∑–∞–≤–µ—Ç–∞',
  '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–î–∞—Ä—å—è', '–í–∞—Ä–≤–∞—Ä–∞', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞', '–ê—Ä–∏–Ω–∞', '–í–µ—Ä–æ–Ω–∏–∫–∞', '–ú–∏–ª–∞–Ω–∞', '–£–ª—å—è–Ω–∞',
  '–Ø–Ω–∞', '–ö—Ä–∏—Å—Ç–∏–Ω–∞', '–î–∏–∞–Ω–∞', '–í–∞–ª–µ—Ä–∏—è', '–ê–ª—ë–Ω–∞', '–ò—Ä–∏–Ω–∞', '–°–≤–µ—Ç–ª–∞–Ω–∞', '–¢–∞—Ç—å—è–Ω–∞'
];

const russianLastNames = [
  '–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤', '–°–∏–¥–æ—Ä–æ–≤', '–°–º–∏—Ä–Ω–æ–≤', '–ö—É–∑–Ω–µ—Ü–æ–≤', '–ü–æ–ø–æ–≤', '–í–∞—Å–∏–ª—å–µ–≤', '–°–æ–∫–æ–ª–æ–≤',
  '–ú–∏—Ö–∞–π–ª–æ–≤', '–ù–æ–≤ikov', '–§—ë–¥–æ—Ä–æ–≤', '–ú–æ—Ä–æ–∑–æ–≤', '–í–æ–ª–∫–æ–≤', '–ê–ª–µ–∫—Å–µ–µ–≤', '–õ–µ–±–µ–¥–µ–≤', '–°–µ–º—ë–Ω–æ–≤',
  '–ï–≥–æ—Ä–æ–≤', '–ü–∞–≤–ª–æ–≤', '–ö–æ–∑–ª–æ–≤', '–°—Ç–µ–ø–∞–Ω–æ–≤', '–ù–∏–∫–æ–ª–∞–µ–≤', '–û—Ä–ª–æ–≤', '–ê–Ω–¥—Ä–µ–µ–≤', '–ú–∞–∫–∞—Ä–æ–≤',
  '–ù–∏–∫–∏—Ç–∏–Ω', '–ó–∞—Ö–∞—Ä–æ–≤', '–ó–∞–π—Ü–µ–≤', '–°–æ–ª–æ–≤—å—ë–≤', '–ë–æ—Ä–∏—Å–æ–≤', '–Ø–∫–æ–≤–ª–µ–≤', '–ì—Ä–∏–≥–æ—Ä—å–µ–≤', '–†–æ–º–∞–Ω–æ–≤'
];

const emailDomains = ['gmail.com', 'yandex.ru', 'mail.ru', 'outlook.com', 'yahoo.com'];

const moscowAddresses = [
  '—É–ª. –ê—Ä–±–∞—Ç, –¥. 15', '–ø—Ä-—Ç –ú–∏—Ä–∞, –¥. 45', '—É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 12', '—É–ª. –ù–æ–≤—ã–π –ê—Ä–±–∞—Ç, –¥. 8',
  '—É–ª. –õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –¥. 34', '—É–ª. –ö—É—Ç—É–∑–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –¥. 21', '—É–ª. –°–∞–¥–æ–≤–æ–µ –∫–æ–ª—å—Ü–æ, –¥. 67',
  '—É–ª. –°–æ–∫–æ–ª–∏–Ω–∞—è –ì–æ—Ä–∞, –¥. 28', '—É–ª. –ö—Ä–∞—Å–Ω–∞—è –ü—Ä–µ—Å–Ω—è, –¥. 19', '—É–ª. –°–æ–∫–æ–ª—å–Ω–∏–∫–∏, –¥. 42',
  '—É–ª. –ß–∏—Å—Ç—ã–µ –ü—Ä—É–¥—ã, –¥. 11', '–ø–µ—Ä. –ö–∞–º–µ—Ä–≥–µ—Ä—Å–∫–∏–π, –¥. 3', '—É–ª. –û—Å—Ç–æ–∂–µ–Ω–∫–∞, –¥. 25'
];

function getRandomElement(array) {
  return array[Math.floor(Math.random() * array.length)];
}

function generatePhone() {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const codes = ['903', '905', '906', '909', '951', '952', '953', '960', '961', '962'];
  const code = getRandomElement(codes);
  const number = Math.floor(1000000 + Math.random() * 9000000);
  return `7${code}${number}`;
}

function generateEmail(firstName, lastName) {
  const domain = getRandomElement(emailDomains);
  const variants = [
    `${firstName.toLowerCase()}.${lastName.toLowerCase()}@${domain}`,
    `${firstName.toLowerCase()}${lastName.toLowerCase()}@${domain}`,
    `${firstName.toLowerCase()}_${lastName.toLowerCase()}@${domain}`,
    `${firstName.toLowerCase()}${Math.floor(Math.random() * 100)}@${domain}`
  ];
  return getRandomElement(variants);
}

function generateBirthDate() {
  const minAge = 18;
  const maxAge = 70;
  const age = Math.floor(Math.random() * (maxAge - minAge + 1)) + minAge;
  const currentYear = new Date().getFullYear();
  const birthYear = currentYear - age;
  const month = Math.floor(Math.random() * 12);
  const day = Math.floor(Math.random() * 28) + 1; // –î–æ 28 –¥–Ω—è —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Ñ–µ–≤—Ä–∞–ª–µ–º
  
  return new Date(birthYear, month, day);
}

function generateCoordinates() {
  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã: 55.7558¬∞ N, 37.6176¬∞ E
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ä–∞–¥–∏—É—Å–µ ~50 –∫–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –ú–æ—Å–∫–≤—ã
  const moscowLat = 55.7558;
  const moscowLng = 37.6176;
  const radius = 0.5; // –ø—Ä–∏–º–µ—Ä–Ω–æ 50 –∫–º –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
  
  const lat = moscowLat + (Math.random() - 0.5) * radius;
  const lng = moscowLng + (Math.random() - 0.5) * radius;
  
  return { latitude: lat, longitude: lng };
}

async function createFakeUsers(count = 20) {
  console.log(`üöÄ –°–æ–∑–¥–∞–Ω–∏–µ ${count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
  
  const users = [];
  const existingPhones = new Set();
  const existingEmails = new Set();
  
  for (let i = 0; i < count; i++) {
    const gender = Math.random() > 0.5 ? 'MALE' : 'FEMALE';
    const firstName = gender === 'MALE' 
      ? getRandomElement(russianMaleNames) 
      : getRandomElement(russianFemaleNames);
    const lastName = getRandomElement(russianLastNames);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
    let phone;
    do {
      phone = generatePhone();
    } while (existingPhones.has(phone));
    existingPhones.add(phone);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π email
    let email;
    do {
      email = generateEmail(firstName, lastName);
    } while (existingEmails.has(email));
    existingEmails.add(email);
    
    const coordinates = generateCoordinates();
    const birthDate = generateBirthDate();
    const address = getRandomElement(moscowAddresses);
    
    // 90% –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 10% –∞–¥–º–∏–Ω–æ–≤
    const role = Math.random() < 0.1 ? 'ADMIN' : 'USER';
    
    const userData = {
      phone,
      email,
      firstName,
      lastName,
      gender,
      birthDate,
      role,
      isVerified: true,
      status: 'ACTIVE',
      registrationStep: 5, // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
      latitude: coordinates.latitude,
      longitude: coordinates.longitude,
      address,
    };
    
    // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
    if (role === 'ADMIN') {
      userData.login = phone;
      userData.password = await bcrypt.hash('admin123', 10);
    }
    
    users.push(userData);
    
    console.log(`‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${i + 1}: ${firstName} ${lastName} (${role})`);
  }
  
  console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    const createdUsers = await prisma.$transaction(async (tx) => {
      const results = [];
      for (const userData of users) {
        const user = await tx.users.create({
          data: userData
        });
        results.push(user);
      }
      return results;
    });
    
    console.log(`\nüéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${createdUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const adminCount = createdUsers.filter(u => u.role === 'ADMIN').length;
    const userCount = createdUsers.filter(u => u.role === 'USER').length;
    const maleCount = createdUsers.filter(u => u.gender === 'MALE').length;
    const femaleCount = createdUsers.filter(u => u.gender === 'FEMALE').length;
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    console.log(`   üë• –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${userCount}`);
    console.log(`   üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: ${adminCount}`);
    console.log(`   üë® –ú—É–∂—á–∏–Ω—ã: ${maleCount}`);
    console.log(`   üë© –ñ–µ–Ω—â–∏–Ω—ã: ${femaleCount}`);
    
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    createdUsers.slice(0, 5).forEach((user, index) => {
      console.log(`   ${index + 1}. ID: ${user.id}, ${user.firstName} ${user.lastName} (${user.role})`);
      console.log(`      üìû ${user.phone}, üìß ${user.email}`);
    });
    
    if (createdUsers.length > 5) {
      console.log(`   ... –∏ –µ—â—ë ${createdUsers.length - 5} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }
    
    console.log('\nüß™ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!');
    console.log(`   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ–≥–æ: DELETE /admin/users/{id}`);
    console.log(`   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: DELETE /admin/users/bulk`);
    console.log(`   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –æ—Ç ${Math.min(...createdUsers.map(u => u.id))} –¥–æ ${Math.max(...createdUsers.map(u => u.id))}`);
    
    return createdUsers;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
    throw error;
  }
}

async function main() {
  try {
    console.log('üéØ –ì–ï–ù–ï–†–ê–¢–û–† –¢–ï–°–¢–û–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    console.log('=' .repeat(50));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const existingCount = await prisma.users.count();
    console.log(`üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: ${existingCount}`);
    
    if (existingCount > 50) {
      console.log('‚ö†Ô∏è  –í –±–∞–∑–µ —É–∂–µ –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã)');
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    const args = process.argv.slice(2);
    let count = 20; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if (args.length > 0 && !isNaN(args[0])) {
      count = parseInt(args[0]);
      if (count < 1 || count > 100) {
        console.log('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100');
        process.exit(1);
      }
    }
    
    console.log(`üéØ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${count}`);
    console.log('');
    
    await createFakeUsers(count);
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = { createFakeUsers };
