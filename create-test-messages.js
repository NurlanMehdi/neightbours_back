"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("@prisma/client");
const prisma = new client_1.PrismaClient();
async function createTestMessages() {
    console.log('üé≠ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API...');
    try {
        const users = await prisma.users.findMany({
            where: { status: 'ACTIVE' },
            select: { id: true, firstName: true, lastName: true }
        });
        if (users.length < 3) {
            console.log('‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤');
            return;
        }
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        const events = await prisma.event.findMany({
            where: { isActive: true },
            select: { id: true, title: true },
            take: 5
        });
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${events.length} —Å–æ–±—ã—Ç–∏–π`);
        const messageTemplates = [
            '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö—Ç–æ –∏–¥–µ—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?',
            '–£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
            '–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é',
            '–ú–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Ä–µ–º—è?',
            '–Ø –ø—Ä–∏–≥–ª–∞—à—É —Å–æ—Å–µ–¥–µ–π',
            '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π?',
            '–ì–¥–µ –±—É–¥–µ–º –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è?',
            '–ü—Ä–∏–Ω–µ—Å—Ç–∏ —á—Ç–æ-—Ç–æ —Å —Å–æ–±–æ–π?',
            '–°–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å?',
            '–≠—Ç–æ –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!',
            '–Ø –Ω–µ–º–Ω–æ–≥–æ –æ–ø–æ–∑–¥–∞—é',
            '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é!',
            '–ï—Å—Ç—å –ª–∏ –ø–∞—Ä–∫–æ–≤–∫–∞ —Ä—è–¥–æ–º?',
            '–ú–æ–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –¥–µ—Ç–µ–π?',
            '–í–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è?'
        ];
        let totalMessages = 0;
        for (const event of events) {
            console.log(`\nüìù –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ "${event.title}" (ID: ${event.id})`);
            await prisma.eventMessage.deleteMany({
                where: { eventId: event.id }
            });
            const messageCount = 5 + Math.floor(Math.random() * 6);
            for (let i = 0; i < messageCount; i++) {
                const randomUser = users[Math.floor(Math.random() * users.length)];
                const randomMessage = messageTemplates[Math.floor(Math.random() * messageTemplates.length)];
                await prisma.eventMessage.create({
                    data: {
                        text: `${randomMessage} #${i + 1}`,
                        userId: randomUser.id,
                        eventId: event.id,
                        createdAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000),
                    }
                });
                totalMessages++;
            }
            console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
        }
        await prisma.eventRead.deleteMany({});
        console.log('\nüßπ –û—á–∏—â–µ–Ω—ã –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–æ—á—Ç–µ–Ω–∏—è');
        const testScenarios = [
            { userId: 1, readEvents: [1, 2] },
            { userId: 2, readEvents: [1] },
        ];
        for (const scenario of testScenarios) {
            if (users.find(u => u.id === scenario.userId)) {
                for (const eventId of scenario.readEvents) {
                    if (events.find(e => e.id === eventId)) {
                        await prisma.eventRead.create({
                            data: {
                                userId: scenario.userId,
                                eventId: eventId,
                                readAt: new Date(),
                            }
                        });
                    }
                }
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${scenario.userId} –ø—Ä–æ—á–∏—Ç–∞–ª —Å–æ–±—ã—Ç–∏—è: ${scenario.readEvents.join(', ')}`);
            }
        }
        console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        for (const event of events) {
            const messageCount = await prisma.eventMessage.count({
                where: { eventId: event.id }
            });
            const messagesFromOthersForUser1 = await prisma.eventMessage.count({
                where: {
                    eventId: event.id,
                    userId: { not: 1 }
                }
            });
            const isReadByUser1 = await prisma.eventRead.findFirst({
                where: { userId: 1, eventId: event.id }
            });
            console.log(`–°–æ–±—ã—Ç–∏–µ ${event.id} (${event.title}):`);
            console.log(`  - –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messageCount}`);
            console.log(`  - –û—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –æ—Ç ID 1): ${messagesFromOthersForUser1}`);
            console.log(`  - –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 1: ${isReadByUser1 ? '–î–∞' : '–ù–µ—Ç'}`);
            console.log(`  - –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è API (user 1): ${!isReadByUser1 && messagesFromOthersForUser1 > 0 ? `{"${event.id}":{"notifications":${messagesFromOthersForUser1}}}` : '–Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è'}`);
        }
        console.log(`\nüéâ –°–æ–∑–¥–∞–Ω–æ ${totalMessages} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!`);
        console.log('\nüîó –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
        console.log('# –í—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ (–¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è 3-5):');
        console.log('curl -X GET "http://localhost:3000/api/events/messages/unread" -H "Authorization: Bearer [token]"');
        console.log('\n# –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3):');
        console.log('curl -X GET "http://localhost:3000/api/events/messages/unread?eventId=3" -H "Authorization: Bearer [token]"');
        console.log('\n# –ü—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ (–¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å {}):');
        console.log('curl -X GET "http://localhost:3000/api/events/messages/unread?eventId=1" -H "Authorization: Bearer [token]"');
    }
    catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
    finally {
        await prisma.$disconnect();
    }
}
createTestMessages();
//# sourceMappingURL=create-test-messages.js.map